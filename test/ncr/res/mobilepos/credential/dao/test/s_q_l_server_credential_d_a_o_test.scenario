Scenario: Perform CredentialDAOTest
Given an instance of SQLServerCredentialDAO
Given a table entry named {dataset.xml} in the database
Then its Database Manager must have been settled
Given an Operator with Operator Number {111}
!-- Logged-off Operator Sign-On Success
When the Operator do sign-on with passcode {111} and terminalid {123}
Then it should succeed
Then the Status of the operator should be {1}
!-- Logged-on Operator Re-SignOn Success
When the Operator do sign-on with passcode {111} and terminalid {123}
Then it should succeed
Then the Status of the operator should be {1}
!-- Logged-on Operator SignOff Success
When the Operator sign's off
Then it should succeed
Then the Status of the operator should be {0}
!-- Operator with Passcode Sign-on Error (invalid passcode)
When the Operator do sign-on with passcode {123} and terminalid {123}
Then it should fail with error 306
Then the Status of the operator should be {0}
!-- Operator with Passcode Sign-on Error (empty passcode)
When the Operator do sign-on with passcode {} and terminalid {123}
Then it should fail with error 306
Then the Status of the operator should be {0}
!-- Operator with Passcode Sign-on Error (invalid identical passcode)
When the Operator do sign-on with passcode {11111111} and terminalid {123}
Then it should fail with error 306
Then the Status of the operator should be {0}
!-- Operator with Passcode Sign-on Error (too long passcode)
When the Operator do sign-on with passcode {111111111111111111111111} and terminalid {123}
Then it should fail with error 306
Then the Status of the operator should be {0}

!-- Operator Sign-on Error (too long operator number)
Given an Operator with Operator Number {111111111111111111111111111}
When the Operator do sign-on with passcode {111} and terminalid {123}
Then it should fail with error 305

!-- Operator with Passcode Sign-on Success (After Multiple Tries of Signon Error)
Given an Operator with Operator Number {111}
When the Operator do sign-on with passcode {111} and terminalid {123}
Then it should succeed
Then the Status of the operator should be {1}

!-- Create new Operator
Given a new operator with Operator Number {101} and pass-code {101} to be created
Then it should succeed
Given an Operator with Operator Number {101}
Then it should succeed
Then the Status of the operator should be {0}
!-- Serialize operator
Given an Operator with Operator Number {101}
When the Operator do sign-on with passcode {101} and terminalid {123}
Then it should succeed
Then its serialized XML should be: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Details><NCRWSSExtendedResultCode>0</NCRWSSExtendedResultCode><NCRWSSResultCode>0</NCRWSSResultCode><OperatorNo>101</OperatorNo><SignOnAt>19:13</SignOnAt><Date>Nov 22, '12</Date><OperatorType>0</OperatorType><Permissions><Transactions>true</Transactions><Reports>true</Reports><Settings>true</Settings><Merchandise>true</Merchandise><Administration>true</Administration><Drawer>true</Drawer></Permissions></Details>
!-- Create existing Operator
Given a new operator with Operator Number {101} and pass-code {101} to be created
Then it should fail with error 304
!-- Create Operator with alpha operator Number
Given a new operator with Operator Number {ABC} and pass-code {101} to be created
Then it should fail with error 304
!-- Create Operator with alpha operator Number
Given a new operator with Operator Number {ABC} and pass-code {101} to be created
Then it should fail with error 304
!-- Create Operator with empty operator number and pass-code
Given an instance of SQLServerCredentialDAO
Given a new operator with Operator Number {} and pass-code {} to be created
Then it should fail with error 304

Scenario: Existing operator with NULL passcode can signon with empty passcode
Given an instance of SQLServerCredentialDAO
Given an Operator with Operator Number {222}
When the Operator do sign-on with passcode {} and terminalid {123}
Then it should succeed
Then the Status of the operator should be {1}
Then I should have an updated table:
|operatorno|passcode|terminalid|
|101       |101     |123       |
|111       |111     |123       |
|222       |        |123       |
|333       |        |null      |

!-- Existing operator with EMPTY passcode can signon with empty passcode
Given an Operator with Operator Number {333}
When the Operator do sign-on with passcode {} and terminalid {001}
Then it should succeed
Then the Status of the operator should be {1}
Then I should have an updated table:
|operatorno|passcode|terminalid|
|101       |101     |123       |
|111       |111     |123       |
|222       |        |123       |
|333       |        |001       |

Scenario: Existing operator with NULL passcode can signon with null passcode
Given an instance of SQLServerCredentialDAO
Given an Operator with Operator Number {222}
When the Operator do sign-on with passcode {null} and terminalid {123}
Then it should succeed
Then the Status of the operator should be {1}
Then I should have an updated table:
|operatorno|passcode|terminalid|
|101       |101     |123       |
|111       |111     |123       |
|222       |null    |123       |
|333       |        |001       |

!-- Existing operator with EMPTY passcode can signon with null passcode
Given an Operator with Operator Number {333}
When the Operator do sign-on with passcode {null} and terminalid {123}
Then it should succeed
Then the Status of the operator should be {1}
Then I should have an updated table:
|operatorno|passcode|terminalid|
|101       |101     |123       |
|111       |111     |123       |
|222       |null    |123       |
|333       |null    |123       |

Scenario: Existing operator with NULL passcode can signon with passcode given
Given an instance of SQLServerCredentialDAO
Given an Operator with Operator Number {222}
When the Operator do sign-on with passcode {222} and terminalid {123}
Then it should succeed
Then the Status of the operator should be {1}
Then I should have an updated table:
|operatorno|passcode|terminalid|
|101       |101     |123       |
|111       |111     |123       |
|222       |222     |123       |
|333       |null    |123       |

!-- Existing operator with EMPTY passcode can signon with passcode given
Given an Operator with Operator Number {333}
When the Operator do sign-on with passcode {333} and terminalid {0001}
Then it should succeed
Then the Status of the operator should be {1}
Then I should have an updated table:
|operatorno|passcode|terminalid|
|101       |101     |123       |
|111       |111     |123       |
|222       |222     |123       |
|333       |333     |0001      |

!-- Existing operator with passcode can signon from different terminalid
Given an Operator with Operator Number {333}
When the Operator do sign-on with passcode {333} and terminalid {0002}
Then it should succeed
Then the Status of the operator should be {1}
Then I should have an updated table:
|operatorno|passcode|terminalid|
|101       |101     |123       |
|111       |111     |123       |
|222       |222     |123       |
|333       |333     |0002      |

Scenario: SignOn operator error (SQLException)
Given an instance of SQLServerCredentialDAO
Given an Operator with Operator Number {333}
When the Operator do sign-on with passcode {} and terminalid {123} then an SQLException occurs
Then it should fail with error 134
Then I should have an updated table:
|operatorno|passcode|terminalid|
|101       |101     |123       |
|111       |111     |123       |
|222       |222     |123       |
|333       |333     |0002      |
