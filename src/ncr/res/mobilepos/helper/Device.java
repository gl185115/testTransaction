package ncr.res.mobilepos.helper;

import java.io.File;
import java.io.IOException;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import ncr.realgate.util.IoWriter;
import ncr.res.mobilepos.model.ResultBase;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * class that handles and creates autogenerated device numbers.
 *
 */
public class Device {
    private static final String PROG_NAME = "Device";
	/**
     * class instance of the logger.
     */
    private static final Logger LOGGER = (Logger) Logger.getInstance(); //Get the Logger

    /**
     * contsructor.
     */
    public Device() {
    	
    }

    /**
     * Helper method of getDeviceNumber
     * 
     * @return fileParser
     */
    private FileParser getFilePath() {
    	
    	FileParser fileParser = null;	

        String path = null;

        String functionName = PROG_NAME+".getDeviceNumber";
		try {
            Context env =
                (Context) new InitialContext().lookup("java:comp/env");
            path = (String) env.lookup("devicenoxml");

        } catch (NamingException e) {
            LOGGER.logAlert(PROG_NAME, functionName,
                    Logger.LOG_MSGID, "Failed to look up path in web.xml.");
        } catch (Exception e) {
            LOGGER.logAlert(PROG_NAME, functionName,
                    Logger.RES_EXCEP_GENERAL, e.getMessage());
        } finally {
            if (path == null || path.isEmpty()) {
                String sysEnv = System.getenv("RGTMP");
                if (sysEnv == null) {
                    LOGGER.logAlert(PROG_NAME, functionName,
                            Logger.LOG_MSGID,
                            "RGTMP not found in System Environment.");
                    sysEnv = "c:\\temp";
                }
                path = sysEnv + "\\deviceno.xml";
            }

            fileParser = new FileParser(path);

            File file = new File(path);
            File directory = new File(file.getParent());

            boolean isDirectoryCreated = directory.mkdirs();

             if (!directory.exists() && !isDirectoryCreated) {
                 LOGGER.logAlert(PROG_NAME, functionName,
                         Logger.LOG_MSGID,
                         "Failed to create directory for deviceno.xml.");
                 fileParser = new FileParser("c:\temp\\deviceno.xml");
             }
        }
        
        return fileParser;
    }
    
    /**
     * gets the device number from a file.
     * used when auto-generating device numbers
     * @return String the device number
     */
    public final String getDeviceNumber() {

        String functionName = PROG_NAME+".getDeviceNumber";
		LOGGER.logFunctionEntry(PROG_NAME, functionName,
                "Thread" + this.hashCode());
        FileParser fileParser = getFilePath();

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder;
        String filepath = fileParser.getFilePath();
        String terminalId = "";

        File file = new File(filepath);
        if ((!file.exists()) 
                && (!fileParser.writeToFile(initDeviceNumberXml()))) {            
                return "5001";            
        }

        synchronized (file) {
            try {
                builder = factory.newDocumentBuilder();
                Document doc = builder.parse(filepath);
                Element rootElement = doc.getDocumentElement();
                NodeList nodeTid =
                    rootElement.getElementsByTagName("TerminalId");
                long lTid =
                    Integer.parseInt(nodeTid.item(0).getTextContent());
                lTid++;
                terminalId = String.valueOf(lTid);
                nodeTid.item(0).setTextContent(terminalId);

                Transformer transformer =
                    TransformerFactory.newInstance().newTransformer();
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                StreamResult result = new StreamResult(new File(filepath));
                DOMSource source = new DOMSource(doc);
                transformer.transform(source, result);

            } catch (ParserConfigurationException e) {
				LOGGER.logAlert(PROG_NAME, functionName,
						Logger.RES_EXCEP_PARSE,
						"Failed to get the device number.\n" + e.getMessage());
            } catch (SAXException e) {
				LOGGER.logAlert(PROG_NAME, functionName,
						Logger.RES_EXCEP_PARSE,
						"Failed to get the device number.\n" + e.getMessage());
            } catch (IOException e) {
				LOGGER.logAlert(PROG_NAME, functionName,
						Logger.RES_EXCEP_IO,
						"Failed to get the device number.\n" + e.getMessage());
            } catch (TransformerException e) {
				LOGGER.logAlert(PROG_NAME, functionName,
						Logger.RES_EXCEP_GENERAL,
						"Failed to get the device number.\n" + e.getMessage());
            } finally {
                LOGGER.logFunctionExit(PROG_NAME, functionName,
                        "getting of terminal number for Thread "
                        + this.hashCode()
                        + "\nTerminal Id was " + terminalId);
            }
        }
        return terminalId;
    }

    /**
     * initialize the device number xml.
     * @return the base xml string return
     */
    private String initDeviceNumberXml() {
        StringBuilder sb = new StringBuilder();
        sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        sb.append("<Device>");
        sb.append("<TerminalId>5000</TerminalId>");
        sb.append("</Device>");
        return sb.toString();
    }
}
